#include "sc6800x_video_header.h"

void cavlc_qp_delta( ENC_IMAGE_PARAMS_T *img_ptr, ENC_MB_MODE_T *mb_info_ptr)
{
#ifdef RC_BU
	int32 i_dqp;
	if (img_ptr->curr_mb_nr == img_ptr->sh.i_first_mb)
	{
		i_dqp = mb_info_ptr->qp - img_ptr->qp;
	}
	else
	{
		i_dqp = mb_info_ptr->qp - prev_qp;
	}

	prev_qp = mb_info_ptr->qp;
	
#else
    int32 i_dqp = mb_info_ptr->qp - img_ptr->qp;
#endif

    if( i_dqp )
    {
        if( i_dqp < -26 )
		{
            i_dqp += 52;
		}else if( i_dqp > 25 )
		{
            i_dqp -= 52;
		}
    }

    WRITE_SE_V(i_dqp );
}

static void cavlc_mb_mvd( ENC_IMAGE_PARAMS_T *img_ptr, ENC_MB_MODE_T *mb_info_ptr, ENC_MB_CACHE_T *mb_cache_ptr, int idx, int width )
{
    int mvp[2];

	H264Enc_mb_predict_mv (img_ptr, mb_info_ptr, mb_cache_ptr, idx, width, mvp, 0);

    WRITE_SE_V (mb_cache_ptr->mv[x264_scan8[idx]][0] - mvp[0] );
#ifdef TV_OUT
	mb_info_ptr->cavlc_end_bits = g_bsm_reg_ptr->TOTAL_BITS;
	PrintfCavlcOffset(mb_info_ptr, "mvd_l0");
	mb_info_ptr->cavlc_start_bits = g_bsm_reg_ptr->TOTAL_BITS;
#endif
    WRITE_SE_V (mb_cache_ptr->mv[x264_scan8[idx]][1] - mvp[1] );
#ifdef TV_OUT
	mb_info_ptr->cavlc_end_bits = g_bsm_reg_ptr->TOTAL_BITS;
	PrintfCavlcOffset(mb_info_ptr, "mvd_l0");
	mb_info_ptr->cavlc_start_bits = g_bsm_reg_ptr->TOTAL_BITS;
#endif
	mb_info_ptr->mvd_8x8[idx/4][0] = (mb_cache_ptr->mv[x264_scan8[idx]][0] - mvp[0]);
	mb_info_ptr->mvd_8x8[idx/4][1] = (mb_cache_ptr->mv[x264_scan8[idx]][1] - mvp[1]);
}


void cavlc_mb8x8_mvd( ENC_IMAGE_PARAMS_T *img_ptr, ENC_MB_MODE_T *mb_info_ptr, ENC_MB_CACHE_T *mb_cache_ptr, int i )
{
	int32 mb_partition_listX_table[17] =
	{
		1, 1, 1, 1, /* D_L0_* */
		0, 0, 0, 0, /* D_L1_* */
		1, 1, 1, 1, /* D_BI_* */
		0,          /* D_DIRECT_8x8 */
		0, 0, 0, 0  /* 8x8 .. 16x16 */
	};

    if( !mb_partition_listX_table[ mb_info_ptr->i_sub_partition[i] ] )
        return;

    switch( mb_info_ptr->i_sub_partition[i] )
    {
        case D_L0_8x8:
            cavlc_mb_mvd( img_ptr, mb_info_ptr, mb_cache_ptr, 4*i, 2 );
            break;
        case D_L0_8x4:
            cavlc_mb_mvd( img_ptr, mb_info_ptr, mb_cache_ptr, 4*i+0, 2 );
            cavlc_mb_mvd( img_ptr, mb_info_ptr, mb_cache_ptr, 4*i+2, 2 );
            break;
        case D_L0_4x8:
            cavlc_mb_mvd( img_ptr, mb_info_ptr, mb_cache_ptr, 4*i+0, 1 );
            cavlc_mb_mvd( img_ptr, mb_info_ptr, mb_cache_ptr, 4*i+1, 1 );
            break;
        case D_L0_4x4:
            cavlc_mb_mvd( img_ptr, mb_info_ptr, mb_cache_ptr, 4*i+0, 1 );
            cavlc_mb_mvd( img_ptr, mb_info_ptr, mb_cache_ptr, 4*i+1, 1 );
            cavlc_mb_mvd( img_ptr, mb_info_ptr, mb_cache_ptr, 4*i+2, 1 );
            cavlc_mb_mvd( img_ptr, mb_info_ptr, mb_cache_ptr, 4*i+3, 1 );
            break;
    }
}
