#!/usr/bin/perl
# THIS IS AN UNPUBLISHED WORK CONTAINING D2 TECHNOLOGIES, INC. CONFIDENTIAL
# AND PROPRIETARY INFORMATION.  IF PUBLICATION OCCURS, THE FOLLOWING NOTICE
# APPLIES: "COPYRIGHT 2004 D2 TECHNOLOGIES, INC. ALL RIGHTS RESERVED"
#
# $D2Tech$ $Rev: 9620 $ $Date: 2009-05-20 03:20:18 +0800 (Wed, 20 May 2009) $
#

# This script generates a C source file 
# which contains the following:
#   - string constant with the specified string msg
#   - string constant with md5sum of each file specified on cmd line
#
# The output C file can then be compiled and linked into an archive
# to contain revision information.
#


package d2_rel_tag;

#
# Usage
# --------
$Usage = <<_EOT_;
d2reltag.pl   Copyright 2004 D2 Technologies, Inc  \$Revision: 9620 $

Usage:
  d2reltag.pl [--output=outfile] [--msg=Msg] 
                [--lkm]
                [--env=VAR] --name=NAME 
                [--flags=string] [files ...]

where:
    outfile     name of output file, default: stdout
    VAR         environment variable to read Msg from
    Msg         string Msg to place in the msg const char string
    lkm         add Linux EXPORT_SYMBOL definitions for Kernel Modules
    NAME        name of the module being released (in uppercase)
    files...    input files to pass to md5sum and include in file listing

    Note, --env and --msg are exclusive; only one is necessary.

example:

    d2reltag.pl  --env=TAGNAME --flags="-O3 -flnk_opt" \
                    --name=MOD  mod.c mod_asm.s mod.h _mod.h

_EOT_


#
# Static Configuration
# --------
#
# executable to generate md5sum's
$ExternalMd5sum = 'md5sum';
# Program name
$Prog = 'd2reltag.pl';

# Header to place in C output.
#  Note, Revision header below will change with d2reltag.pl revision.
#  It is meant to be that way.
$Header = '
/*
 * THIS IS AN UNPUBLISHED WORK CONTAINING D2 TECHNOLOGIES, INC. CONFIDENTIAL
 * AND PROPRIETARY INFORMATION.  IF PUBLICATION OCCURS, THE FOLLOWING NOTICE
 * APPLIES: "COPYRIGHT 2005 D2 TECHNOLOGIES, INC. ALL RIGHTS RESERVED"
 *
 * $D2Tech$ $Rev: 9620 $ $Date: 2009-05-20 03:20:18 +0800 (Wed, 20 May 2009) $
 *
 */

 /* 
  * --------
  * Warning.  This file is automatically generated.
  * Manual changes will be lost.
  */

';

exit &Main;


# ======== Main ========
#
# Arg parsing and file handling
sub Main 
{
    use Getopt::Long;

    my ($msg, $file, @sums);

    GetOptions( "output=s"  => \$OptOutFilename,
                "msg=s"     => \$OptMsg,
                "name=s"    => \$OptName,
                "flags=s"   => \$OptFlags,
                "lkm"       => \$OptLkm,
                "help"      => \$OptUsage,
                "verbose"   => \$OptVerbose,
                "env=s"     => \$OptEnvVar);

    if ($OptUsage) { &Usage; return 1; }

    # Error check user arguments
    # must specify either --msg or --env
    if (!$OptMsg && !$OptEnvVar) { 
        print STDERR "$Prog: must specify msg or environment variable.\n";
        return 1;
    }

    # must specify --name
    if (!$OptName) { 
        print STDERR "$Prog: must specify module name with --name.\n";
        return 1;
    }

    # empty --env is not allowed
    if ($OptEnvVar && !$ENV{$OptEnvVar}) { 
        print STDERR "$Prog: environment variable $OptEnvVar not set.\n";
        return 1;
    }

    # Create Msg
    if ($OptEnvVar) {
        if ($OptMsg) { $OptMsg .= "\n"; }
        $OptMsg .= $ENV{$OptEnvVar};
    }
    # Munge all quotes in Msg to apostrophe's
    $OptMsg =~ s/"/'/g;
    # Munge all funny chars in Name to underscores
    $OptName =~ s/[^A-Za-z0-9]/_/g;
    # Munge all quotes in Flags to apostrophe's
    $OptFlags =~ s/"/'/g;

    # Create md5sums for all output files
    foreach $file (@ARGV) { 
        if (! -e $file || 
                !($_ = GetRevInfo($file))) { 
            print STDERR "$Prog: cant read $file\n";
            return 2;
        }
        push(@sums, $_);
        print $_ if $OptVerbose;
    }

    # open output file
    if ($OptOutFilename) { 
        open(FILEOUT, '>'.$OptOutFilename) 
            || die "$Prog: Can't write $OptOutFilename\n";
    }
    else { 
        *FILEOUT = *STDOUT;
    }

    # Generate C source header
    print FILEOUT $Header;

    # Generate C source const for msg
    print FILEOUT <<_EOT_;
char const D2_Release_$OptName\[] = "+D2Tech+ $OptName $OptMsg";

_EOT_

    if ($OptFlags) { 
        print FILEOUT <<_EOT_;
char const D2_Buildflags_$OptName\[] = "+D2Tech+ $OptName $OptFlags";

_EOT_
    }

    # Generate C source table for per-file information
    if (@sums) { 
        # begin C string
        print FILEOUT <<_EOT_;
char const D2_Revisions_$OptName\[] = "+D2Tech+ $OptName\\n\\
_EOT_

        # Loop for all sums
        for (@sums) { 
            # remove newlines, if any
            s/[\n\r]//g;
            # Munge quote to apostrophe's
            s/"/'/g;
            print FILEOUT "$_\\n\\\n";
        }

        # end C string
        print FILEOUT <<_EOT_;
";
_EOT_

    }

    # Generate Linux 2.6 export symbols
    if ($OptLkm) { 
        print FILEOUT <<_EOT_;
#include <linux/init.h>
#include <linux/module.h>

EXPORT_SYMBOL(D2_Release_$OptName);
_EOT_
        if ($OptFlag) { 
            print FILEOUT <<_EOT_;
EXPORT_SYMBOL(D2_Buildflags_$OptName);
_EOT_
        }
        if (@sums) { 
            print FILEOUT <<_EOT_;
EXPORT_SYMBOL(D2_Revisions_$OptName);
_EOT_
        }
    }

    
    if ($OptOutFilename) {
        close FILEOUT;
    }

    return 0;
}

#
# ======== Usage ========
#
sub Usage 
{ 
    print $Usage;
    return;
}

# 
# ======== GetRevInfo ========
# Return md5sum and revision info for the given file.
#
sub GetRevInfo 
{ 
    local $file = @_[0];
    local $sum;
    local *PIPE;
    local $Keywords = 'D2Tech|Revision';

    open(PIPE, "$ExternalMd5sum $file |") 
            || die "cant execute $ExternalMd5sum on $file\n";
    while (<PIPE>) { 
        $sum .= $_;
    }
    close PIPE;

    open(FILE, $file);
    while (<FILE>) { 
        # find $Revision: 9620 $
        if (/\$($Keywords)\s*([^\$]+)\$/) { 
            $sum .= $2;
        }
        # find +Revision: 1.1 +
        if (/\+($Keywords)\s*([^+]+)\+/) { 
            $sum .= $2;
        }
    }
    close FILE;

    return $sum;
}


__END__

